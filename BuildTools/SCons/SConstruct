import sys, os, re, platform
import SCons.SConf

Import("env", "conf_env")

root = Dir("../..").abspath

# Override SConscript to handle tests
oldSConscript = SConscript
def SConscript(*arguments, **keywords) :
	if not keywords.get("test_only", False) or env["TEST"] :
		return apply(oldSConscript, arguments, keywords)
env.SConscript = SConscript
  
################################################################################
# Extend the default build environment (not affecting the configure env)
#
# Keeping both environments separated mostly because of SCons Issue 2391,
# although it doesn't hurt to separate them (e.g. not have pretty printed
# strings in config.log)
################################################################################

#if env["PLATFORM"] == "win32" :
#	env["MSVC_BATCH"] = 1

# Pretty output
def colorize(command, target, color) :
	colors = { "red": "31", "green": "32", "yellow": "33", "blue": "34" }
	prefix = ""
	suffix = ""
	if sys.stdout.isatty() and env["PLATFORM"] != "win32":
		prefix = "\033[0;" + colors[color] + ";140m"
		suffix = "\033[0m"
	return "  " + prefix + command + suffix + " " + target

if int(ARGUMENTS.get("V", 0)) == 0:
	env["CCCOMSTR"] = colorize("CC", "$TARGET", "green")
	env["SHCCCOMSTR"] = colorize("CC", "$TARGET", "green")
	env["CXXCOMSTR"] = colorize("CXX", "$TARGET", "green")
	env["SHCXXCOMSTR"] = colorize("CXX", "$TARGET", "green")
	env["LINKCOMSTR"] = colorize("LINK", "$TARGET", "red")
	env["SHLINKCOMSTR"] = colorize("LINK", "$TARGET", "red")
	env["ARCOMSTR"] = colorize("AR", "$TARGET", "red")
	env["RANLIBCOMSTR"] = colorize("RANLIB", "$TARGET", "red")
	env["QT4_RCCCOMSTR"] = colorize("RCC", "$TARGET", "blue")
	env["QT4_UICCOMSTR"] = colorize("UIC", "$TARGET", "blue")
	env["QT4_MOCFROMHCOMSTR"] = colorize("MOC", "$TARGET", "blue")
	env["QT4_MOCFROMCXXCOMSTR"] = colorize("MOC", "$TARGET", "blue")
	env["QT4_LRELEASECOMSTR"] = colorize("LRELEASE", "$TARGET", "blue")
	env["QT4_LUPDATECOMSTR"] = colorize("LUPDATE", "$TARGET", "blue")
	env["GENCOMSTR"] = colorize("GEN", "$TARGET", "blue")
	env["RCCOMSTR"] = colorize("RC", "$TARGET", "blue")
	env["BUNDLECOMSTR"] = colorize("BUNDLE", "$TARGET", "blue")
	env["NIBCOMSTR"] = colorize("NIB", "$TARGET", "blue")
	env["NSISCOMSTR"] = colorize("NSIS", "$TARGET", "blue")
	env["INSTALLSTR"] = colorize("INSTALL", "$TARGET", "blue")
	env["TESTCOMSTR"] = colorize("TEST", "$SOURCE", "yellow")
	env["FOCOMSTR"] = colorize("FO", "$TARGET", "blue")
	env["XSLTCOMSTR"] = colorize("XSLT", "$TARGET", "blue")
	env["XMLLINTCOMSTR"] = colorize("XMLLINT", "$SOURCE", "blue")
	env["DOXYCOMSTR"] = colorize("DOXY", "$SOURCE", "blue")
	#Progress(colorize("DEP", "$TARGET", "red")

def checkObjCHeader(context, header) :
	context.Message("Checking for Objective-C header " + header + " ... ")
	ret = context.TryCompile("#include <Cocoa/Cocoa.h>\n#include <" + header + ">", ".m")
	context.Result(ret)
	return ret

################################################################################
# Platform configuration
################################################################################

env.Append(CPPPATH = [root])

if ARGUMENTS.get("force-configure", 0) :
  SCons.SConf.SetCacheMode("force")

def CheckPKG(context, name):
	context.Message( 'Checking for package %s... ' % name )
	ret = context.TryAction('pkg-config --exists \'%s\'' % name)[0]
	context.Result( ret )
	return ret

def CheckVersion(context, library, version, define, header, value) :
	context.Message("Checking " + library + " version (>= " + version + ") ...")
	ret = context.TryRun("""
#include <%(header)s>
#include <stdio.h>

int main(int argc, char* argv[]) {
	printf("%%d\\n", %(define)s);
	return 0;
}
""" % { "header" : header, "define": define }, ".c")
	ok = ret[0] and int(ret[1]) >= value
	context.Result(ok)
	return ok

conf = Configure(conf_env)

if not conf.CheckCXX() or not conf.CheckCC() :
	print "Error: You need a working compiler"
	Exit(1)

env["HAVE_ZLIB"] = True
if conf.CheckLib("z") :
	env["ZLIB_FLAGS"] = {"LIBS": ["z"]}
else :
	env["ZLIB_BUNDLED"] = True

if conf.CheckLib("resolv") :
	env["PLATFORM_FLAGS"]["LIBS"] = env["PLATFORM_FLAGS"].get("LIBS", []) + ["resolv"]

if env["PLATFORM"] != "win32" :
	if conf.CheckLib("pthread") :
		env["PLATFORM_FLAGS"]["LIBS"] = env["PLATFORM_FLAGS"].get("LIBS", []) + ["pthread"]

if conf.CheckLib("dl") :
	env["PLATFORM_FLAGS"]["LIBS"] = env["PLATFORM_FLAGS"].get("LIBS", []) + ["dl"]

if conf.CheckLib("m") :
	env["PLATFORM_FLAGS"]["LIBS"] = env["PLATFORM_FLAGS"].get("LIBS", []) + ["m"]

if conf.CheckLib("c") :
	env["PLATFORM_FLAGS"]["LIBS"] = env["PLATFORM_FLAGS"].get("LIBS", []) + ["c"]

if conf.CheckLib("stdc++") :
	env["PLATFORM_FLAGS"]["LIBS"] = env["PLATFORM_FLAGS"].get("LIBS", []) + ["stdc++"]

conf.Finish()

# Boost
boost_conf_env = conf_env.Clone()
boost_flags = {}
boost_flags["CPPDEFINES"] = [("BOOST_FILESYSTEM_VERSION", "2")]
if env.get("boost_libdir", None) :
	boost_flags["LIBPATH"] = [env["boost_libdir"]]
if env.get("boost_includedir", None) :
	if env["PLATFORM"] == "win32" :
		boost_flags["CPPPATH"] = [env["boost_includedir"]]
	else :
		# Using isystem to avoid getting warnings from a system boost
		# Unfortunately, this also disables dependency tracking
		boost_flags["CPPFLAGS"] = [("-isystem", env["boost_includedir"])]
boost_conf_env.MergeFlags(boost_flags)
conf = Configure(boost_conf_env)
boostLibs = [("signals", None), ("thread", None), ("regex", None), ("program_options", None), ("filesystem", None), ("system", "system/system_error.hpp"), ("date_time", "date_time/date.hpp")]
allLibsPresent = True
libNames = []
for (lib, header) in boostLibs :
	if header :
		header = "boost/" + header
	else :
		header = "boost/" + lib + ".hpp"
	if not conf.CheckCXXHeader(header) :
		allLibsPresent = False
		break
	if env["PLATFORM"] != "win32" :
		libName = "boost_" + lib
		if not conf.CheckLib(libName) :
			libName += "-mt"
			if not conf.CheckLib(libName) :
				allLibsPresent = False
				break
		libNames.append(libName)
if allLibsPresent :
	env["BOOST_FLAGS"] = boost_flags
	if env["PLATFORM"] != "win32" :
		env["BOOST_FLAGS"].update({"LIBS": libNames})
	if not conf.CheckCXXHeader("boost/uuid/uuid.hpp") :
		# FIXME: Remove this workaround when UUID is available in most distros
		env["BOOST_BUNDLED_UUID_ONLY"] = True
else :
	env["BOOST_BUNDLED"] = True
conf.Finish()


# Xss
env["HAVE_XSS"] = 0
if env["PLATFORM"] != "win32" and env["PLATFORM"] != "darwin" :
	xss_flags = {
			"LIBPATH": ["/usr/X11R6/lib"],
			"LIBS": ["Xss"]
		}
	xss_env = conf_env.Clone()
	xss_env.MergeFlags(xss_flags)
	conf = Configure(xss_env)
	if conf.CheckFunc("XScreenSaverQueryExtension") :
		env["HAVE_XSS"] = 1
		env["XSS_FLAGS"] = xss_flags
	conf.Finish()

# GConf
env["HAVE_GCONF"] = 0
if env["PLATFORM"] != "win32" and env["PLATFORM"] != "darwin" :
	gconf_env = conf_env.Clone()
	conf = Configure(gconf_env, custom_tests = {"CheckPKG": CheckPKG})
	if conf.CheckPKG("gconf-2.0") :
		gconf_bare_env = Environment()
		gconf_bare_env.ParseConfig('pkg-config --cflags gconf-2.0 gobject-2.0 --libs gconf-2.0 gobject-2.0')
		gconf_flags = {
				"LIBS": gconf_bare_env["LIBS"],
				"CCFLAGS": gconf_bare_env["CCFLAGS"],
				"CPPPATH": gconf_bare_env["CPPPATH"],
				"CPPDEFINES": gconf_bare_env.get("CPPDEFINES", []),
			}
		gconf_env.MergeFlags(gconf_flags)
		if conf.CheckCHeader("gconf/gconf-client.h") and conf.CheckLib("gconf-2") :
			env["HAVE_GCONF"] = 1
			env["GCONF_FLAGS"] = {
				"LIBS": gconf_env["LIBS"],
				"CCFLAGS": gconf_env["CCFLAGS"],
				"CPPPATH": gconf_env["CPPPATH"],
				"CPPDEFINES": gconf_env.get("CPPDEFINES", []),
			}
	conf.Finish()

# Sparkle
env["HAVE_SPARKLE"] = 0
if env["PLATFORM"] == "darwin" :
	sparkle_flags = {
			"FRAMEWORKPATH": ["/Library/Frameworks"],
			"FRAMEWORKS": ["Sparkle"]
		}
	sparkle_env = conf_env.Clone()
	sparkle_env.MergeFlags(sparkle_flags)
	conf = Configure(sparkle_env, custom_tests = { "CheckObjCHeader" : checkObjCHeader })
	if conf.CheckObjCHeader("Sparkle/Sparkle.h") :
		env["HAVE_SPARKLE"] = 1
		env["SPARKLE_FLAGS"] = sparkle_flags
		env["SPARKLE_FRAMEWORK"] = "/Library/Frameworks/Sparkle.framework"
	conf.Finish()

# Growl
env["HAVE_GROWL"] = 0
if env["PLATFORM"] == "darwin" :
	growl_flags = {
			"FRAMEWORKPATH": ["/Library/Frameworks"],
			"FRAMEWORKS": ["Growl"]
		}
	growl_env = conf_env.Clone()
	growl_env.MergeFlags(growl_flags)
	conf = Configure(growl_env, custom_tests = { "CheckObjCHeader" : checkObjCHeader })
	if conf.CheckObjCHeader("Growl/Growl.h") :
		env["HAVE_GROWL"] = 1
		env["GROWL_FLAGS"] = growl_flags
		env["GROWL_FRAMEWORK"] = "/Library/Frameworks/Growl.framework"
	conf.Finish()

# Snarl
if env["PLATFORM"] == "win32" :
	env["HAVE_SNARL"] = True

# LibXML
conf = Configure(conf_env, custom_tests = {"CheckVersion": CheckVersion})
if conf.CheckCHeader("libxml/parser.h") and conf.CheckLib("xml2") :
#and conf.CheckVersion("LibXML", "2.6.23", "LIBXML_VERSION", "libxml/xmlversion.h", 20623) :
	env["HAVE_LIBXML"] = 1
	env["LIBXML_FLAGS"] = { "LIBS": ["xml2"] }
conf.Finish()

if not env.get("HAVE_LIBXML", 0) :
	libxml_env = conf_env.Clone()
	libxml_env.Append(CPPPATH = ["/usr/include/libxml2"])
	conf = Configure(libxml_env, custom_tests = {"CheckVersion": CheckVersion})
	if conf.CheckCHeader("libxml/parser.h") and conf.CheckLib("xml2") :
#	and conf.CheckVersion("LibXML", "2.6.23", "LIBXML_VERSION", "libxml/xmlversion.h", 20623):
		env["HAVE_LIBXML"] = 1
		env["LIBXML_FLAGS"] = { "CPPPATH": ["/usr/include/libxml2"], "LIBS": ["xml2"] }
	conf.Finish()

# Expat
if not env.get("HAVE_LIBXML",0) :
	expat_conf_env = conf_env.Clone()
	expat_flags = {}
	if env.get("expat_libdir", None) :
		expat_flags["LIBPATH"] = [env["expat_libdir"]]
	if env.get("expat_includedir", None) :
		expat_flags["CPPPATH"] = [env["expat_includedir"]]
	expat_conf_env.MergeFlags(expat_flags)
	conf = Configure(expat_conf_env)
	if conf.CheckCHeader("expat.h") and conf.CheckLib(env["expat_libname"]) :
		env["HAVE_EXPAT"] = 1
		env["EXPAT_FLAGS"] = { "LIBS": [env["expat_libname"]] }
		env["EXPAT_FLAGS"].update(expat_flags)
	conf.Finish()

# Bundled expat
bundledExpat = False
if not env.get("HAVE_EXPAT", 0) and not env.get("HAVE_LIBXML", 0) :
	print "Expat or LibXML not found. Using bundled Expat"
	SConscript("#/3rdParty/Expat/SConscript")
	env["HAVE_EXPAT"] = 1
	env["EXPAT_BUNDLED"] = True

# LibIDN
libidn_conf_env = conf_env.Clone()
libidn_flags = {}
if env.get("libidn_libdir", None) :
	libidn_flags["LIBPATH"] = [env["libidn_libdir"]]
if env.get("libidn_includedir", None) :
	libidn_flags["CPPPATH"] = [env["libidn_includedir"]]
libidn_conf_env.MergeFlags(libidn_flags)
conf = Configure(libidn_conf_env)
if conf.CheckCHeader("idna.h") and conf.CheckLib(env["libidn_libname"]) :
	env["HAVE_LIBIDN"] = 1
	env["LIBIDN_FLAGS"] = { "LIBS": [env["libidn_libname"]] }
	env["LIBIDN_FLAGS"].update(libidn_flags)
else :
	env["LIBIDN_BUNDLED"] = 1
conf.Finish()

# LibMiniUPnPc
if env["experimental"] :
	#libminiupnpc_conf_env = conf_env.Clone()
	#conf = Configure(libminiupnpc_conf_env)
	#if conf.CheckCHeader("miniupnpc.h") and conf.CheckLib(env["libminiupnpc_libname"]) :
	#	print "NOT IMPLEMENTED YET"
	#else :
	env["LIBMINIUPNPC_BUNDLED"] = 1
	#conf.Finish()
else :
	env["LIBMINIUPNPC_FLAGS"] = {}

# LibNATPMP
if env["experimental"] :
	#libnatpmp_conf_env = conf_env.Clone()
	#conf = Configure(libnatpmp_conf_env)
	#if conf.CheckCHeader("natpmp.h") and conf.CheckLib(env["libnatpmp_libname"]) :
	#	print "NOT IMPLEMENTED YET"
	#else :
	env["LIBNATPMP_BUNDLED"] = 1
	#conf.Finish()
else :
	env["LIBNATPMP_FLAGS"] = {}

# SQLite
#sqlite_conf_env = conf_env.Clone()
#sqlite_flags = {}
#if env.get("sqlite_libdir", None) :
#	sqlite_flags["LIBPATH"] = [env["sqlite_libdir"]]
#if env.get("sqlite_includedir", None) :
#	sqlite_flags["CPPPATH"] = [env["sqlite_includedir"]]
#sqlite_conf_env.MergeFlags(sqlite_flags)
#conf = Configure(sqlite_conf_env)
#if conf.CheckCHeader("sqlite3.h") and conf.CheckLib(env["sqlite_libname"]) :
#	env["HAVE_SQLITE"] = 1
#	env["SQLITE_FLAGS"] = { "LIBS": [env["sqlite_libname"]] }
#	env["SQLITE_FLAGS"].update(sqlite_flags)
#else :
#	env["SQLITE_BUNDLED"] = 1
#conf.Finish()

# Lua
env["LUA_BUNDLED"] = 1

# Readline
conf = Configure(conf_env)
if conf.CheckCHeader(["stdio.h", "readline/readline.h"]) and conf.CheckLib("readline") :
	env["HAVE_READLINE"] = True
	env["READLINE_FLAGS"] = { "LIBS": ["readline"] }
conf.Finish()

# Avahi
avahi_conf_env = conf_env.Clone()
avahi_flags = {}
if env.get("avahi_libdir", None) :
	avahi_flags["LIBPATH"] = [env["avahi_libdir"]]
if env.get("avahi_includedir", None) :
	avahi_flags["CPPPATH"] = [env["avahi_includedir"]]
avahi_conf_env.MergeFlags(avahi_flags)
conf = Configure(avahi_conf_env)
if conf.CheckCHeader("avahi-client/client.h") and conf.CheckLib("avahi-client") and conf.CheckLib("avahi-common") :
	env["HAVE_AVAHI"] = True
	env["AVAHI_FLAGS"] = { "LIBS": ["avahi-client", "avahi-common"] }
	env["AVAHI_FLAGS"].update(avahi_flags)
conf.Finish()

# Qt
if env["qt"] :
	env["QTDIR"] = env["qt"]

# OpenSSL
openssl_env = conf_env.Clone()
use_openssl = bool(env["openssl"])
openssl_prefix = env["openssl"] if isinstance(env["openssl"], str) else ""
openssl_flags = {}
if openssl_prefix :
	openssl_flags = { "CPPPATH": [os.path.join(openssl_prefix, "include")] }
	if env["PLATFORM"] == "win32" : 
		openssl_flags["LIBPATH"] = [os.path.join(openssl_prefix, "lib", "VC")]
		env["OPENSSL_DIR"] = openssl_prefix
	else :
		openssl_flags["LIBPATH"] = [os.path.join(openssl_prefix, "lib")]
	openssl_env.MergeFlags(openssl_flags)

openssl_conf = Configure(openssl_env)
if use_openssl and openssl_conf.CheckCHeader("openssl/ssl.h") :
	env["HAVE_OPENSSL"] = 1
	env["OPENSSL_FLAGS"] = openssl_flags
	if env["PLATFORM"] == "win32" : 
		env["OPENSSL_FLAGS"]["LIBS"] = ["libeay32MD", "ssleay32MD"]
	else:
		env["OPENSSL_FLAGS"]["LIBS"] = ["ssl", "crypto"]
		if env["PLATFORM"] == "darwin" :
			if platform.mac_ver()[0].startswith("10.5") :
				env["OPENSSL_FLAGS"]["FRAMEWORKS"] = ["Security"]
elif env["target"] in ("iphone-device", "iphone-simulator", "xcode") :
	env["OPENSSL_BUNDLED"] = True
	env["HAVE_OPENSSL"] = True
else :
	env["OPENSSL_FLAGS"] = ""
	if env["PLATFORM"] == "win32" : 
		env["HAVE_SCHANNEL"] = True
		# If we're compiling for Windows and OpenSSL isn't being used, use Schannel
		env.Append(LIBS = ["secur32"])

openssl_conf.Finish()

# Bonjour
if env["PLATFORM"] == "darwin" :
	env["HAVE_BONJOUR"] = 1
elif env.get("bonjour", False) :
	bonjour_env = conf_env.Clone()
	bonjour_conf = Configure(bonjour_env)
	bonjour_flags = {}
	if env.get("bonjour") != True :		
		bonjour_prefix = env["bonjour"]
		bonjour_flags["CPPPATH"] = [os.path.join(bonjour_prefix, "include")]
		bonjour_flags["LIBPATH"] = [os.path.join(bonjour_prefix, "lib", "win32")]
	bonjour_env.MergeFlags(bonjour_flags)
	if bonjour_conf.CheckCHeader("dns_sd.h") and bonjour_conf.CheckLib("dnssd") :
		env["HAVE_BONJOUR"] = 1
		env["BONJOUR_FLAGS"] = bonjour_flags
		env["BONJOUR_FLAGS"]["LIBS"] = ["dnssd"]
	bonjour_conf.Finish()

# Cocoa & IOKit
if env["PLATFORM"] == "darwin" :
	cocoa_conf = Configure(conf_env)
	if cocoa_conf.CheckCHeader("IOKit/IOKitLib.h") :
		env["HAVE_IOKIT"] = True
	cocoa_conf.Finish()

# Qt
try :
	myenv = env.Clone()
	myenv.Tool("qt4", toolpath = ["#/BuildTools/SCons/Tools"])
	env["HAVE_QT"] = True
except :
	env["HAVE_QT"] = False

################################################################################
# DocBook setup
################################################################################

if env.get("docbook_xml") :
	env["DOCBOOK_XML_DIR"] = env["docbook_xml"]
if env.get("docbook_xsl") :
	env["DOCBOOK_XSL_DIR"] = env["docbook_xsl"]


################################################################################
# Set up git hooks
################################################################################

if env.Dir("#/.git").exists() :
	if not env.GetOption("clean") :
		env.Install("#/.git/hooks", Glob("#/BuildTools/Git/Hooks/*"))

################################################################################
# Project files
################################################################################

# Build tools
env.SConscript(dirs = ["#/BuildTools/CLang"])

# Modules
modules = []
for dir in os.listdir(Dir("#/3rdParty").abspath) :
	full_dir = os.path.join(Dir("#/3rdParty").abspath, dir)
	if not os.path.isdir(full_dir) :
		continue
	sconscript = os.path.join(full_dir, "SConscript")
	if os.path.isfile(sconscript) :
		modules.append("3rdParty/" + dir)
for dir in os.listdir(Dir("#").abspath) :
	full_dir = os.path.join(Dir("#").abspath, dir)
	if not os.path.isdir(full_dir) :
		continue
	sconscript = os.path.join(full_dir, "SConscript")
	if os.path.isfile(sconscript) :
		modules.append(dir)

# Flags
env["PROJECTS"] = [m for m in modules if m not in ["Documentation", "QA", "SwifTools"] and not m.startswith("3rdParty")]
for stage in ["flags", "build", "test"] :
	env["SCONS_STAGE"] = stage
	SConscript(dirs = map(lambda x : root + "/" + x, modules))

# SLOCCount
if ARGUMENTS.get("sloccount", False) :
  for project in env["PROJECTS"] :
    env.SLOCCount("#/" + project)

################################################################################
# Print summary
################################################################################

print
print "  Build Configuration"
print "  -------------------"

parsers = []
if env.get("HAVE_LIBXML", 0):
	parsers.append("LibXML")
if env.get("HAVE_EXPAT", 0):
	parsers.append("Expat")
	if env.get("EXPAT_BUNDLED", False) :
		parsers.append("(Bundled)")
print "  Projects: " + ' '.join(env["PROJECTS"])
print ""
print "  XML Parsers: " + ' '.join(parsers)

print "  TLS Support: " + ("OpenSSL" if env.get("HAVE_OPENSSL",0) else "Disabled")
print "  DNSSD Support: " + ("Bonjour" if env.get("HAVE_BONJOUR") else ("Avahi" if env.get("HAVE_AVAHI") else "Disabled"))
print
