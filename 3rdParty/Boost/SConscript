Import("env")

# FIXME: Remove this when Boost UUID is present on most distros
if env.get("BOOST_BUNDLED_UUID_ONLY", False) :
	# Cherry pick UUID out of the 3rdParty dir, install it in a separate
	# dir, and use this as an include path.
	if env["SCONS_STAGE"] == "flags" :
		if env["PLATFORM"] == "win32" :
			uuid_cppflags = ["/I" + Dir("uuid").abspath]
		else :
			uuid_cppflags = [("-isystem", Dir("uuid").abspath)]
		env["BOOST_FLAGS"]["CPPFLAGS"] = env["BOOST_FLAGS"].get("CPPFLAGS", []) + uuid_cppflags
	elif env["SCONS_STAGE"] == "build" :
		env.Install("uuid/boost", "src/boost/uuid")

elif env.get("BOOST_BUNDLED", False) :

################################################################################
# Common
################################################################################

	cppdefines = ["BOOST_ALL_NO_LIB", "BOOST_SYSTEM_NO_DEPRECATED", ("BOOST_FILESYSTEM_VERSION", "2")]
	#if env["PLATFORM"] == "darwin" :
	#	cppdefines += ["BOOST_ASIO_DISABLE_KQUEUE"]
	if env["PLATFORM"] == "win32" :
		cppflags = ["/I" + Dir("#/3rdParty/Boost/src").abspath]
	else :
		cppflags = [("-isystem", Dir("#/3rdParty/Boost/src").abspath)]


################################################################################
# Flags
################################################################################

	if env["SCONS_STAGE"] == "flags" :
		env["BOOST_FLAGS"] = {
				"CPPFLAGS": cppflags,
				"CPPDEFINES": cppdefines,
				"LIBPATH": [Dir(".")],
				"LIBS": ["Swiften_Boost"]
			}
		if env["PLATFORM"] == "win32" :
			env["BOOST_FLAGS"]["CPPDEFINES"] += [("_WIN32_WINNT", "0x0501")]
			if env["PLATFORM"] == "cygwin" :
				env["BOOST_FLAGS"]["CPPDEFINES"] += ["__USE_W32_SOCKETS"]

################################################################################
# Build
################################################################################

	if env["SCONS_STAGE"] == "build" :
		myenv = env.Clone()
		myenv.Replace(CXXFLAGS = [flag for flag in env["CXXFLAGS"] if not flag.startswith("-W")])

		sources = [
				"src/libs/date_time/src/gregorian/date_generators.cpp",
				"src/libs/date_time/src/gregorian/greg_month.cpp",
				"src/libs/date_time/src/gregorian/greg_weekday.cpp",
				"src/libs/date_time/src/gregorian/gregorian_types.cpp",
				"src/libs/date_time/src/posix_time/posix_time_types.cpp",
				"src/libs/system/src/error_code.cpp",
				"src/libs/thread/src/tss_null.cpp",
				"src/libs/signals/src/connection.cpp",
				"src/libs/signals/src/named_slot_map.cpp",
				"src/libs/signals/src/signal_base.cpp",
				"src/libs/signals/src/slot.cpp",
				"src/libs/signals/src/trackable.cpp",
				"src/libs/filesystem/v2/src/v2_operations.cpp",
				"src/libs/filesystem/v2/src/v2_path.cpp",
				"src/libs/filesystem/v2/src/v2_portability.cpp",
				"src/libs/filesystem/v3/src/filesystem_utf8_codecvt_facet.cpp",
				"src/libs/regex/src/c_regex_traits.cpp",
				"src/libs/regex/src/cpp_regex_traits.cpp",
				"src/libs/regex/src/cregex.cpp",
				"src/libs/regex/src/fileiter.cpp",
				"src/libs/regex/src/icu.cpp",
				"src/libs/regex/src/instances.cpp",
				"src/libs/regex/src/posix_api.cpp",
				"src/libs/regex/src/regex.cpp",
				"src/libs/regex/src/regex_debug.cpp",
				"src/libs/regex/src/regex_raw_buffer.cpp",
				"src/libs/regex/src/regex_traits_defaults.cpp",
				"src/libs/regex/src/static_mutex.cpp",
				"src/libs/regex/src/w32_regex_traits.cpp",
				"src/libs/regex/src/wc_regex_traits.cpp",
				"src/libs/regex/src/wide_posix_api.cpp",
				"src/libs/regex/src/winstances.cpp",
				"src/libs/regex/src/usinstances.cpp",
				"src/libs/program_options/src/cmdline.cpp",
				"src/libs/program_options/src/config_file.cpp",
				"src/libs/program_options/src/convert.cpp",
				"src/libs/program_options/src/options_description.cpp",
				"src/libs/program_options/src/positional_options.cpp",
				"src/libs/program_options/src/split.cpp",
				"src/libs/program_options/src/program_options_utf8_codecvt_facet.cpp",
				"src/libs/program_options/src/value_semantic.cpp",
				"src/libs/program_options/src/variables_map.cpp",
				"src/libs/program_options/src/winmain.cpp"]

		if env["PLATFORM"] != "darwin" or env["target"] == "native" :
			sources += [
					"src/libs/program_options/src/parsers.cpp",
				]

		if env["PLATFORM"] != "win32" :
			sources += [
					"src/libs/thread/src/pthread/once.cpp",
					"src/libs/thread/src/pthread/thread.cpp"]
		else :
			sources += [
					"win32_stubs.cpp",
					"src/libs/thread/src/win32/thread.cpp",
					"src/libs/thread/src/win32/tss_dll.cpp",
					"src/libs/thread/src/win32/tss_pe.cpp"]

		myenv.MergeFlags(myenv["BOOST_FLAGS"])
		myenv.StaticLibrary("Swiften_Boost", sources)

		if ARGUMENTS.get("BOOST_BUILD_BCP") or env.GetOption("clean") :
			bcp_env = myenv.Clone()
			bcp_env.MergeFlags(bcp_env["BOOST_FLAGS"])
			bcp_env.Append(CPPPATH = ["src/tools/bcp"])
			bcp_env.Replace(CPPDEFINES = [flag for flag in bcp_env["CPPDEFINES"] if flag[0] != "BOOST_FILESYSTEM_VERSION"])
			bcp_env.Program("bcp", [
					"src/libs/filesystem/v3/src/codecvt_error_category.cpp",
					"src/libs/filesystem/v3/src/operations.cpp",
					"src/libs/filesystem/v3/src/path.cpp",
					"src/libs/filesystem/v3/src/path_traits.cpp",
					"src/libs/filesystem/v3/src/portability.cpp",
					"src/libs/filesystem/v3/src/unique_path.cpp",
					"src/libs/filesystem/v3/src/windows_file_codecvt.cpp",
					"src/tools/bcp/add_path.cpp",
					"src/tools/bcp/add_dependent_lib.cpp",
					"src/tools/bcp/bcp_imp.cpp",
					"src/tools/bcp/copy_path.cpp",
					"src/tools/bcp/file_types.cpp",
					"src/tools/bcp/fileview.cpp",
					"src/tools/bcp/licence_info.cpp",
					"src/tools/bcp/output_licence_info.cpp",
					"src/tools/bcp/path_operations.cpp",
					"src/tools/bcp/scan_cvs_path.cpp",
					"src/tools/bcp/scan_licence.cpp",
					"bcp.cpp",
				])
